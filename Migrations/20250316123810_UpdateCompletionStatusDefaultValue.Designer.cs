// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HotelBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250316123810_UpdateCompletionStatusDefaultValue")]
    partial class UpdateCompletionStatusDefaultValue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HotelBackend.Models.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("integer")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("amenity_pkey");

                    b.HasIndex("RoomId");

                    b.ToTable("amenity", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.AmenityBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AmenityId")
                        .HasColumnType("integer")
                        .HasColumnName("amenity_id");

                    b.Property<string>("CompletionStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("completion_status")
                        .HasDefaultValueSql("'‚ ®¦Ё¤ ­ЁЁ Ї®¤вўҐа¦¤Ґ­Ёп'::character varying");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer")
                        .HasColumnName("guest_id");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("order_date");

                    b.Property<TimeOnly>("OrderTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("order_time");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateOnly>("ReadyDate")
                        .HasColumnType("date")
                        .HasColumnName("ready_date");

                    b.Property<TimeOnly>("ReadyTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("ready_time");

                    b.HasKey("Id")
                        .HasName("amenity_booking_pkey");

                    b.HasIndex("AmenityId");

                    b.HasIndex("GuestId");

                    b.ToTable("amenity_booking", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.AmenityPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AmenityBookingId")
                        .HasColumnType("integer")
                        .HasColumnName("amenity_booking_id");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("payment_status")
                        .HasDefaultValueSql("NULL::character varying");

                    b.Property<TimeOnly>("PaymentTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("payment_time");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_type_id");

                    b.Property<int>("TotalCost")
                        .HasColumnType("integer")
                        .HasColumnName("total_cost");

                    b.HasKey("Id")
                        .HasName("amenity_payment_pkey");

                    b.HasIndex("AmenityBookingId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("amenity_payment", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.AmenityReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AmenityId")
                        .HasColumnType("integer")
                        .HasColumnName("amenity_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer")
                        .HasColumnName("guest_id");

                    b.Property<DateOnly>("PublicationDate")
                        .HasColumnType("date")
                        .HasColumnName("publication_date");

                    b.Property<TimeOnly>("PublicationTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("publication_time");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.HasKey("Id")
                        .HasName("amenity_review_pkey");

                    b.HasIndex("AmenityId");

                    b.HasIndex("GuestId");

                    b.ToTable("amenity_review", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id")
                        .HasName("bank_pkey");

                    b.ToTable("bank", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_id");

                    b.Property<string>("CardDate")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("card_date");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("card_number");

                    b.HasKey("Id")
                        .HasName("card_pkey");

                    b.HasIndex("BankId");

                    b.HasIndex(new[] { "CardNumber" }, "card_card_number_key")
                        .IsUnique();

                    b.ToTable("card", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("client_pkey");

                    b.HasIndex(new[] { "Email" }, "client_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "client_phone_number_key")
                        .IsUnique();

                    b.ToTable("client", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.Comfort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id")
                        .HasName("comfort_pkey");

                    b.ToTable("comfort", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseSalary")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("base_salary");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<int>("EmployeeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_type_id");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date")
                        .HasColumnName("hire_date");

                    b.Property<int?>("WorkScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("work_schedule_id");

                    b.HasKey("Id")
                        .HasName("employee_pkey");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("WorkScheduleId");

                    b.ToTable("employee", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id")
                        .HasName("employee_type_pkey");

                    b.ToTable("employee_type", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CardId")
                        .HasColumnType("integer")
                        .HasColumnName("card_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("PassportNumberHash")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("passport_number_hash");

                    b.Property<string>("PassportSeriesHash")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("passport_series_hash");

                    b.HasKey("Id")
                        .HasName("guest_pkey");

                    b.HasIndex("CardId");

                    b.HasIndex("ClientId");

                    b.ToTable("guest", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("phone_number");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasColumnName("rating")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("YearOfConstruction")
                        .HasColumnType("integer")
                        .HasColumnName("year_of_construction");

                    b.HasKey("Id")
                        .HasName("hotel_pkey");

                    b.HasIndex(new[] { "Email" }, "hotel_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "hotel_phone_number_key")
                        .IsUnique();

                    b.ToTable("hotel", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.HotelReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("GuestId")
                        .HasColumnType("integer")
                        .HasColumnName("guest_id");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer")
                        .HasColumnName("hotel_id");

                    b.Property<DateOnly>("PublicationDate")
                        .HasColumnType("date")
                        .HasColumnName("publication_date");

                    b.Property<TimeOnly>("PublicationTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("publication_time");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.HasKey("Id")
                        .HasName("hotel_review_pkey");

                    b.HasIndex("GuestId");

                    b.HasIndex("HotelId");

                    b.ToTable("hotel_review", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.HotelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("hotel_type_pkey");

                    b.ToTable("hotel_type", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id")
                        .HasName("payment_type_pkey");

                    b.ToTable("payment_type", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer")
                        .HasColumnName("hotel_id");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("integer")
                        .HasColumnName("room_number");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("integer")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("room_pkey");

                    b.HasIndex("HotelId");

                    b.ToTable("room", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.RoomBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CheckInDate")
                        .HasColumnType("date")
                        .HasColumnName("check_in_date");

                    b.Property<TimeOnly>("CheckInTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("check_in_time");

                    b.Property<DateOnly>("CheckOutDate")
                        .HasColumnType("date")
                        .HasColumnName("check_out_date");

                    b.Property<TimeOnly>("CheckOutTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("check_out_time");

                    b.Property<int>("QuestId")
                        .HasColumnType("integer")
                        .HasColumnName("quest_id");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.HasKey("Id")
                        .HasName("room_booking_pkey");

                    b.HasIndex("QuestId");

                    b.HasIndex("RoomId");

                    b.ToTable("room_booking", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.RoomPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_status");

                    b.Property<TimeOnly>("PaymentTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("payment_time");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_type_id");

                    b.Property<int>("RoomBookingId")
                        .HasColumnType("integer")
                        .HasColumnName("room_booking_id");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_amount");

                    b.HasKey("Id")
                        .HasName("room_payment_pkey");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("RoomBookingId");

                    b.ToTable("room_payment", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.WorkSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date")
                        .HasColumnName("work_date");

                    b.HasKey("Id")
                        .HasName("work_schedule_pkey");

                    b.ToTable("work_schedule", "core");
                });

            modelBuilder.Entity("RoomComfort", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<int>("ComfortId")
                        .HasColumnType("integer")
                        .HasColumnName("comfort_id");

                    b.HasKey("RoomId", "ComfortId")
                        .HasName("room_comfort_pkey");

                    b.HasIndex("ComfortId");

                    b.ToTable("room_comfort", "core");
                });

            modelBuilder.Entity("HotelBackend.Models.Amenity", b =>
                {
                    b.HasOne("HotelBackend.Models.Room", "Room")
                        .WithMany("Amenities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("amenity_room_id_fkey");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelBackend.Models.AmenityBooking", b =>
                {
                    b.HasOne("HotelBackend.Models.Amenity", "Amenity")
                        .WithMany("AmenityBookings")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("amenity_booking_amenity_id_fkey");

                    b.HasOne("HotelBackend.Models.Guest", "Guest")
                        .WithMany("AmenityBookings")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("amenity_booking_guest_id_fkey");

                    b.Navigation("Amenity");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("HotelBackend.Models.AmenityPayment", b =>
                {
                    b.HasOne("HotelBackend.Models.AmenityBooking", "AmenityBooking")
                        .WithMany("AmenityPayments")
                        .HasForeignKey("AmenityBookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("amenity_payment_amenity_booking_id_fkey");

                    b.HasOne("HotelBackend.Models.PaymentType", "PaymentType")
                        .WithMany("AmenityPayments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("amenity_payment_payment_type_id_fkey");

                    b.Navigation("AmenityBooking");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("HotelBackend.Models.AmenityReview", b =>
                {
                    b.HasOne("HotelBackend.Models.Amenity", "Amenity")
                        .WithMany("AmenityReviews")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("amenity_review_amenity_id_fkey");

                    b.HasOne("HotelBackend.Models.Guest", "Guest")
                        .WithMany("AmenityReviews")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("amenity_review_guest_id_fkey");

                    b.Navigation("Amenity");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("HotelBackend.Models.Card", b =>
                {
                    b.HasOne("HotelBackend.Models.Bank", "Bank")
                        .WithMany("Cards")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("card_bank_id_fkey");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("HotelBackend.Models.Employee", b =>
                {
                    b.HasOne("HotelBackend.Models.Client", "Client")
                        .WithMany("Employees")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("employee_client_id_fkey");

                    b.HasOne("HotelBackend.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("employee_employee_type_id_fkey");

                    b.HasOne("HotelBackend.Models.WorkSchedule", "WorkSchedule")
                        .WithMany("Employees")
                        .HasForeignKey("WorkScheduleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("employee_work_schedule_id_fkey");

                    b.Navigation("Client");

                    b.Navigation("EmployeeType");

                    b.Navigation("WorkSchedule");
                });

            modelBuilder.Entity("HotelBackend.Models.Guest", b =>
                {
                    b.HasOne("HotelBackend.Models.Card", "Card")
                        .WithMany("Guests")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("guest_card_id_fkey");

                    b.HasOne("HotelBackend.Models.Client", "Client")
                        .WithMany("Guests")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("guest_client_id_fkey");

                    b.Navigation("Card");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("HotelBackend.Models.HotelReview", b =>
                {
                    b.HasOne("HotelBackend.Models.Guest", "Guest")
                        .WithMany("HotelReviews")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hotel_review_guest_id_fkey");

                    b.HasOne("HotelBackend.Models.Hotel", "Hotel")
                        .WithMany("HotelReviews")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hotel_review_hotel_id_fkey");

                    b.Navigation("Guest");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelBackend.Models.Room", b =>
                {
                    b.HasOne("HotelBackend.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("room_hotel_id_fkey");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelBackend.Models.RoomBooking", b =>
                {
                    b.HasOne("HotelBackend.Models.Guest", "Quest")
                        .WithMany("RoomBookings")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("room_booking_quest_id_fkey");

                    b.HasOne("HotelBackend.Models.Room", "Room")
                        .WithMany("RoomBookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("room_booking_room_id_fkey");

                    b.Navigation("Quest");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelBackend.Models.RoomPayment", b =>
                {
                    b.HasOne("HotelBackend.Models.PaymentType", "PaymentType")
                        .WithMany("RoomPayments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("room_payment_payment_type_id_fkey");

                    b.HasOne("HotelBackend.Models.RoomBooking", "RoomBooking")
                        .WithMany("RoomPayments")
                        .HasForeignKey("RoomBookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("room_payment_room_booking_id_fkey");

                    b.Navigation("PaymentType");

                    b.Navigation("RoomBooking");
                });

            modelBuilder.Entity("RoomComfort", b =>
                {
                    b.HasOne("HotelBackend.Models.Comfort", null)
                        .WithMany()
                        .HasForeignKey("ComfortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("room_comfort_comfort_id_fkey");

                    b.HasOne("HotelBackend.Models.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("room_comfort_room_id_fkey");
                });

            modelBuilder.Entity("HotelBackend.Models.Amenity", b =>
                {
                    b.Navigation("AmenityBookings");

                    b.Navigation("AmenityReviews");
                });

            modelBuilder.Entity("HotelBackend.Models.AmenityBooking", b =>
                {
                    b.Navigation("AmenityPayments");
                });

            modelBuilder.Entity("HotelBackend.Models.Bank", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("HotelBackend.Models.Card", b =>
                {
                    b.Navigation("Guests");
                });

            modelBuilder.Entity("HotelBackend.Models.Client", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Guests");
                });

            modelBuilder.Entity("HotelBackend.Models.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HotelBackend.Models.Guest", b =>
                {
                    b.Navigation("AmenityBookings");

                    b.Navigation("AmenityReviews");

                    b.Navigation("HotelReviews");

                    b.Navigation("RoomBookings");
                });

            modelBuilder.Entity("HotelBackend.Models.Hotel", b =>
                {
                    b.Navigation("HotelReviews");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelBackend.Models.PaymentType", b =>
                {
                    b.Navigation("AmenityPayments");

                    b.Navigation("RoomPayments");
                });

            modelBuilder.Entity("HotelBackend.Models.Room", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("RoomBookings");
                });

            modelBuilder.Entity("HotelBackend.Models.RoomBooking", b =>
                {
                    b.Navigation("RoomPayments");
                });

            modelBuilder.Entity("HotelBackend.Models.WorkSchedule", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
